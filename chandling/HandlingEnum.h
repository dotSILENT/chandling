#pragma once

enum CHandlingAttrib
{
	HANDL_UIDENTIFIER = 1, // A
	HANDL_FMASS,	// B
	HANDL_FTURNMASS, // c
	HANDL_FDRAGMULTIPLIER, // D
	HANDL_CENTREOFMASS_X,	// F
	HANDL_CENTREOFMASS_Y,	// G
	HANDL_CENTREOFMASS_Z,	// H
	HANDL_NPERCENTSUBMERGED,	// I
	HANDL_FTRACTIONMULTIPLIER,	// J
	HANDL_FTRACTIONLOSS,	// K
	HANDL_FTRACTIONBIAS,	// L
	HANDL_TR_NNUMBEROFGEARS,	// M // transmission data, full name is too long for pawn
	HANDL_TR_FMAXVELOCITY,	// N
	HANDL_TR_FENGINEACCELERATION,	// O
	HANDL_TR_FENGINEINERTIA,	// P
	HANDL_TR_NDRIVETYPE,	// Q
	HANDL_TR_NENGINETYPE,	// R
	HANDL_FBRAKEDECELERATION,	// S
	HANDL_FBRAKEBIAS,	// T
	HANDL_BABS,	// U
	HANDL_FSTEERINGLOCK,	// V
	HANDL_FSUSPENSIONFORCELEVEL,	// a
	HANDL_FSUSPENSIONDAMPINGLEVEL,	// b
	HANDL_FSUSPENSIONHIGHSPDCOMDAMP,	// c
	HANDL_FSUSPENSIONUPPERLIMIT,	// d
	HANDL_FSUSPENSIONLOWERLIMIT,	// e
	HANDL_FSUSPENSIONBIAS,	// f
	HANDL_FSUSPENSIONANTIDIVEMULT,	// g
	HANDL_FSEATOFFSETDISTANCE,	// aa
	HANDL_FCOLLISIONDAMAGEMULT,	// ab
	HANDL_UIMONETARYVALUE,	// ac
	HANDL_MODELFLAGS,	// af
	HANDL_HANDLINGFLAGS,	// ag
	HANDL_FRONTLIGHTS,	// ah
	HANDL_REARLIGHTS,	// ai
	HANDL_ANIMGROUP	 // aj
};


/*enum eHandlingModelFlag
{
	MODEL_IS_VAN = 1 << 0,
	MODEL_IS_BUS = 1 << 2,
	MODEL_IS_BIG = 1 << 3,
	MODEL_REVERSE_BONNET = 1 << 4,
	MODEL_HANGING_BOOT = 1 << 5,
	MODEL_TAILGATE_BOOT = 1 << 6,
	MODEL_NOSWING_BOOT = 1 << 7,
	MODEL_NO_DOORS = 1 << 8,
	MODEL_TANDEM_SEATS = 1 << 9,
	MODEL_SIT_IN_BOAT = 1 << 10,
	MODEL_CONVERTIBLE = 1 << 11,
	MODEL_NO_EXHAUST = 1 << 12,
	MODEL_DOUBLE_EXHAUST = 1 << 13,
	MODEL_NO1FPS_LOOK_BEHIND = 1 << 14,
	MODEL_FORCE_DOOR_CHECK = 1 << 15,
	MODEL_AXLE_F_NOTILT = 1 << 16,
	MODEL_AXLE_F_SOLID = 1 << 17,
	MODEL_AXLE_F_MCPHERSON = 1 << 18,
	MODEL_AXLE_F_REVERSE = 1 << 19,
	MODEL_AXLE_R_NOTILT = 1 << 20,
	MODEL_AXLE_R_SOLID = 1 << 21,
	MODEL_AXLE_R_MCPHERSON = 1 << 22,
	MODEL_AXLE_R_REVERSE = 1 << 23,
	MODEL_IS_BIKE = 1 << 24,
	MODEL_IS_HELI = 1 << 25,
	MODEL_IS_PLANE = 1 << 26,
	MODEL_IS_BOAT = 1 << 27,
	MODEL_BOUNCE_PANELS = 1 << 28,
	MODEL_DOUBLE_RWHEELS = 1 << 29,
	MODEL_FORCE_GROUND_CLEARANCE = 1 << 30,
	MODEL_IS_HATCHBACK = 1 << 31
};

enum eHandlingFlag
{
	HANDL_1G_BOOST = 1 << 0,
	HANDL_2G_BOOST = 1 << 1,
	HANDL_NPC_ANTI_ROLL = 1 << 2,
	HANDL_NPC_NEUTRAL_HANDL = 1 << 3,
	HANDL_NO_HANDBRAKE = 1 << 4,
	HANDL_STEER_REARWHEELS = 1 << 5,
	HANDL_HB_REARWHEEL_STEER = 1 << 6,
	HANDL_ALT_STEER_OPT = 1 << 7,
	HANDL_WHEEL_F_NARROW2 = 1 << 8,
	HANDL_WHEEL_F_NARROW = 1 << 9,
	HANDL_WHEEL_F_WIDE = 1 << 10,
	HANDL_WHEEL_F_WIDE2 = 1 << 11,
	HANDL_WHEEL_R_NARROW2 = 1 << 12,
	HANDL_WHEEL_R_NARROW = 1 << 13,
	HANDL_WHEEL_R_WIDE = 1 << 14,
	HANDL_WHEEL_R_WIDE2 = 1 << 15,
	HANDL_HYDRAULIC_GEOM = 1 << 16,
	HANDL_HYDRAULIC_INST = 1 << 17,
	HANDL_HYDRAULIC_NONE = 1 << 18,
	HANDL_NOS_INST = 1 << 19,
	HANDL_OFFROAD_ABILITY = 1 << 20,
	HANDL_OFFROAD_ABILITY2 = 1 << 21,
	HANDL_HALOGEN_LIGHTS = 1 << 22,
	HANDL_PROC_REARWHEEL_1ST = 1 << 23,
	HANDL_USE_MAXSP_LIMIT = 1 << 24,
	HANDL_LOW_RIDER = 1 << 25,
	HANDL_STREER_RACER = 1 << 26,
	HANDL_UNUSED = 1 << 27,
	HANDL_SWINGING_CHASSIS = 1 << 28
};*/

enum CHandlingAttribType
{
	TYPE_NONE,
	TYPE_UINT,
	TYPE_FLOAT,
	TYPE_BYTE,
	TYPE_FLAG
};

CHandlingAttribType GetHandlingAttribType(CHandlingAttrib attribute);
bool CanSetHandlingAttrib(CHandlingAttrib attribute);

void* GetHandlingAttribPtr(struct tHandlingData *handling, CHandlingAttrib attrib);